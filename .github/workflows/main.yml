name: python-deployment

run-name: ${{ github.actor }} - ${{ github.ref_name}} -${{ github.sha }}

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

env:
  PythonVersion: 3.8
  DockerImageName: todoapp
  HELM_VERSION: '3.12.0'
  KIND_VERSION: 'v0.20.0'

jobs:
  python-ci:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./src
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python ${{ env.PythonVersion }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PythonVersion }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install coverage flake8
          pip install -r requirements.txt

      - name: Run tests
        run: |
          python manage.py test

      - name: Generate Report
        run: |
          coverage run --source='.' manage.py test
          coverage report

      - name: Linting
        run: |
          flake8 . --show-source --statistics --exit-zero

      - name: Check Complexity
        run: |
          flake8 . --exit-zero --max-complexity=6

      - name: Upload python artifacts
        uses: actions/upload-artifact@v4
        with:
          name: python-artifacts
          path: .

      - name: Upload helm artifacts
        if: github.ref_name == 'main'
        uses: actions/upload-artifact@v4
        with:
          name: helm-artifacts
          path: ${{ github.workspace }}/helm-charts

  docker-ci:
    name: Build and Push Image
    runs-on: ubuntu-latest
    if: ${{ github.ref_name == 'main' }}
    needs: python-ci
    steps:

    - uses: actions/download-artifact@v4
      name: Download python artifacts
      with:
        name: python-artifacts
        path: .

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Build and push
      uses: docker/build-push-action@v5
      with:
        push: true
        context: ./src
        tags: |
          ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DockerImageName }}:${{ github.sha }}
          ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DockerImageName }}:latest

  helm-ci:
    runs-on: ubuntu-latest
    needs: python-ci
    if: github.ref_name == 'main'
    name: Helm CI
    steps:

    - uses: actions/download-artifact@v4
      with:
        name: helm-artifacts
        path: .

    - name: Set Up Helm
      uses: azure/setup-helm@v4
      with:
        version: ${{ env.HELM_VERSION }}

    - name: Lint helm
      run: helm lint ./todoapp/

    - name: Template Helm
      run: helm template todoapp ./todoapp/ -f ./todoapp/values.yaml

    - name: Package Helm
      run: helm package ./todoapp

    - name: Upload Helm Artifact
      uses: actions/upload-artifact@v4
      with:
        name: helm-package
        path: ./*.tgz

  # NEW: Kubernetes deployment job
  deploy-to-k8s:
    name: Deploy to Kubernetes
    runs-on: ubuntu-latest
    needs: [docker-ci, helm-ci]
    if: github.ref_name == 'main'
    environment:
      name: development

    steps:
    - name: Download Helm package
      uses: actions/download-artifact@v4
      with:
        name: helm-package
        path: .

    - name: Set up Kind cluster
      run: |
        echo "🚀 Setting up Kind cluster..."
        curl -Lo ./kind https://kind.sigs.k8s.io/dl/${{ env.KIND_VERSION }}/kind-linux-amd64
        chmod +x ./kind
        sudo mv ./kind /usr/local/bin/kind

        # Create Kind cluster configuration
        cat > cluster.yml << EOF
        kind: Cluster
        apiVersion: kind.x-k8s.io/v1alpha4
        nodes:
        - role: control-plane
          extraPortMappings:
          - containerPort: 30000
            hostPort: 8000
            protocol: TCP
          - containerPort: 30001
            hostPort: 8080
            protocol: TCP
        EOF

        kind create cluster --config cluster.yml
        kind export kubeconfig

    - name: Verify cluster access
      run: |
        echo "🔍 Verifying cluster access..."
        kubectl cluster-info
        kubectl get nodes

    - name: Set up Helm
      uses: azure/setup-helm@v4
      with:
        version: ${{ env.HELM_VERSION }}

    - name: Helm dry-run
      run: |
        echo "🔍 Running helm dry-run..."
        CHART_FILE=$(ls *.tgz 2>/dev/null | head -n 1)
        helm upgrade --install todoapp $CHART_FILE \
          --namespace development \
          --create-namespace \
          --set image.repository=${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DockerImageName }} \
          --set image.tag=${{ github.sha }} \
          --dry-run \
          --debug

    - name: Helm upgrade --install (atomic)
      run: |
        echo "🚀 Deploying to Kubernetes..."
        CHART_FILE=$(ls *.tgz 2>/dev/null | head -n 1)
        helm upgrade --install todoapp $CHART_FILE \
          --namespace development \
          --create-namespace \
          --set image.repository=${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DockerImageName }} \
          --set image.tag=${{ github.sha }} \
          --atomic \
          --timeout 5m \
          --wait

    - name: Verify deployment
      run: |
        echo "✅ Verifying deployment..."
        kubectl get pods -n development
        kubectl get svc -n development
        kubectl get deployments -n development

    - name: Display deployment info
      run: |
        echo "🎉 Successfully deployed to Kubernetes!"
        echo "🐳 Image: ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DockerImageName }}:${{ github.sha }}"
        echo "🏷️ Environment: development"
        echo "🌐 Application URL: http://localhost:8000"
