name: Deploy to Kubernetes

on:
  workflow_call:
    inputs:
      environment:
        type: string
        required: true
        description: "Environment to deploy to (development, staging)"
      kubeconfig:
        type: string
        required: false
        description: "Kubeconfig for real cluster (optional)"
    secrets:
      DOCKERHUB_USERNAME:
        required: true
      DOCKERHUB_PASSWORD:
        required: true

env:
  HELM_VERSION: '3.12.0'
  KIND_VERSION: 'v0.20.0'
  DOCKER_IMAGE_NAME: ${{ secrets.DOCKERHUB_USERNAME }}/devops-todolist

jobs:
  deploy:
    name: Deploy to ${{ inputs.environment }}
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Helm
      uses: azure/setup-helm@v3
      with:
        version: ${{ env.HELM_VERSION }}

    - name: Set up Kind cluster
      if: inputs.kubeconfig == ''
      run: |
        echo "🚀 Setting up Kind cluster for ${{ inputs.environment }}"
        curl -Lo ./kind https://kind.sigs.k8s.io/dl/${{ env.KIND_VERSION }}/kind-linux-amd64
        chmod +x ./kind
        sudo mv ./kind /usr/local/bin/kind

        # Create Kind cluster configuration
        cat > cluster.yml << EOF
        kind: Cluster
        apiVersion: kind.x-k8s.io/v1alpha4
        nodes:
        - role: control-plane
          extraPortMappings:
          - containerPort: 30000
            hostPort: 8000
            protocol: TCP
        EOF

        kind create cluster --name ${{ inputs.environment }} --config cluster.yml
        kind export kubeconfig --name ${{ inputs.environment }}

    - name: Set up existing cluster
      if: inputs.kubeconfig != ''
      run: |
        echo "🔗 Using existing cluster configuration"
        mkdir -p ~/.kube
        echo "${{ inputs.kubeconfig }}" > ~/.kube/config

    - name: Verify cluster access
      run: |
        echo "🔍 Verifying cluster access..."
        kubectl cluster-info
        kubectl get nodes

    - name: Login to DockerHub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_PASSWORD }}

    - name: Download Helm chart artifact
      uses: actions/download-artifact@v4
      with:
        name: helm-chart-package
        path: .

    - name: Helm dry-run
      run: |
        echo "🔍 Running helm dry-run..."
        CHART_FILE=$(ls *.tgz 2>/dev/null | head -n 1)
        if [ -n "$CHART_FILE" ]; then
          helm upgrade --install devops-todolist $CHART_FILE \
            --namespace ${{ inputs.environment }} \
            --create-namespace \
            --set image.repository=${{ env.DOCKER_IMAGE_NAME }} \
            --set image.tag=${{ github.sha }} \
            --set environment=${{ inputs.environment }} \
            --dry-run \
            --debug
        else
          echo "No Helm chart package found"
          exit 1
        fi

    - name: Helm upgrade --install (atomic)
      run: |
        echo "🚀 Deploying to ${{ inputs.environment }}..."
        CHART_FILE=$(ls *.tgz 2>/dev/null | head -n 1)
        if [ -n "$CHART_FILE" ]; then
          helm upgrade --install devops-todolist $CHART_FILE \
            --namespace ${{ inputs.environment }} \
            --create-namespace \
            --set image.repository=${{ env.DOCKER_IMAGE_NAME }} \
            --set image.tag=${{ github.sha }} \
            --set environment=${{ inputs.environment }} \
            --atomic \
            --timeout 5m \
            --wait
        else
          echo "No Helm chart package found"
          exit 1
        fi

    - name: Verify deployment
      run: |
        echo "✅ Verifying deployment in ${{ inputs.environment }}..."
        kubectl get pods -n ${{ inputs.environment }}
        kubectl get svc -n ${{ inputs.environment }}
        kubectl get deployments -n ${{ inputs.environment }}

    - name: Display deployment info
      run: |
        echo "🎉 Successfully deployed to ${{ inputs.environment }}!"
        echo "🐳 Image: ${{ env.DOCKER_IMAGE_NAME }}:${{ github.sha }}"
        echo "🏷️ Environment: ${{ inputs.environment }}"
        if [ "${{ inputs.environment }}" = "development" ] && [ "${{ inputs.kubeconfig }}" = "" ]; then
          echo "🌐 Local development URL: http://localhost:8000"
        fi
